{"version":3,"sources":["components/Dashboard.js","App.js","serviceWorker.js","index.js","components/IdeaForm.js"],"names":["Dashboard","props","context","react_default","a","createElement","Grid","fluid","PageHeader","Tabs","defaultActiveKey","id","Tab","eventKey","title","IdeaForm","contextTypes","web3","PropTypes","object","App","className","components_Dashboard","Component","Boolean","window","location","hostname","match","ReactDOM","render","dist","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","_this","Object","_home_circleci_repo_projects_idea_hub_client_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","_home_circleci_repo_projects_idea_hub_client_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_home_circleci_repo_projects_idea_hub_client_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","handleChange","bind","_home_circleci_repo_projects_idea_hub_client_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_5__","uploadIdeaTextToIPFS","ipfsNode","IPFS","state","ipfsOptions","version","protocol_version","value","added_file_hash","added_file_contents","_this2","files","add","Buffer","from","err","filesAdded","hash","cat","data","setState","toString","_this3","once","res","agentVersion","protocolVersion","length","e","target","react__WEBPACK_IMPORTED_MODULE_6___default","style","textAlign","network","selectedAccount","react_bootstrap__WEBPACK_IMPORTED_MODULE_9__","controlId","validationState","getValidationState","react_bootstrap__WEBPACK_IMPORTED_MODULE_10__","react_bootstrap__WEBPACK_IMPORTED_MODULE_11__","type","bsSize","placeholder","onChange","Feedback","react_bootstrap__WEBPACK_IMPORTED_MODULE_12__","react_bootstrap__WEBPACK_IMPORTED_MODULE_13__","smOffset","sm","react_bootstrap__WEBPACK_IMPORTED_MODULE_14__","onClick","React"],"mappings":"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","file":"static/js/main.a5f7fd32.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport IdeaForm from './IdeaForm';\nimport { PageHeader, Tabs, Tab, Grid } from 'react-bootstrap';\n \nfunction Dashboard(props, context) {\n  //const web3Context = context.web3;\n \n  /**\n   * web3Context = {\n   *   accounts: {Array<string>} - All accounts\n   *   selectedAccount: {string} - Default ETH account address (coinbase)\n   *   network: {string} - One of 'MAINNET', 'ROPSTEN', or 'UNKNOWN'\n   *   networkId: {string} - The network ID (e.g. '1' for main net)\n   * }\n   */\n \n  return (\n    <Grid fluid={true}>\n      <PageHeader>\n        Idea Hub: <small>Submit and view ideas in OSO Idea Network</small>\n      </PageHeader>\n      <Tabs defaultActiveKey={1} id=\"uncontrolled-tab-example\">\n        <Tab eventKey={1} title=\"Submit an Idea\">\n          <IdeaForm />\n        </Tab>\n        <Tab eventKey={2} title=\"View your Ideas\">\n            Tab 2 content\n        </Tab>\n        <Tab eventKey={3} title=\"Explore the Idea network\">\n            Tab 3 content\n        </Tab>\n      </Tabs>\n    </Grid>\n  );\n}\n \nDashboard.contextTypes = {\n  web3: PropTypes.object\n};\n \nexport default Dashboard;","import React, { Component } from 'react';\nimport Dashboard from './components/Dashboard';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App medium-padding\">\n        <Dashboard />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Web3Provider } from 'react-web3';\n\nReactDOM.render(\n  <Web3Provider>\n    <App />\n  </Web3Provider>,\n  document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport IPFS from 'ipfs';\nimport { FormGroup, ControlLabel, FormControl, HelpBlock, Col, Button } from 'react-bootstrap';\n\nconst PUBLIC_GATEWAY = 'https://ipfs.io/ipfs';\n\nclass IdeaForm extends React.Component {\n  constructor (props, context) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.uploadIdeaTextToIPFS = this.uploadIdeaTextToIPFS.bind(this);\n    this.ipfsNode = new IPFS();\n    this.state = {\n      ipfsOptions: {\n        id: null,\n        version: null,\n        protocol_version: null,\n      },\n      value: '',\n      added_file_hash: '',\n      added_file_contents: '',\n    };\n  }\n\n  uploadIdeaTextToIPFS () {\n    this.ipfsNode.files.add([Buffer.from(this.state.value)], (err, filesAdded) => {\n      if (err) { throw err }\n\n      const hash = filesAdded[0].hash;\n\n      this.ipfsNode.files.cat(hash, (err, data) => {\n        if (err) { throw err }\n        this.setState({\n          added_file_hash: hash,\n          added_file_contents: data.toString(),\n        });\n      })\n    });\n  }\n\n  componentDidMount () {\n    this.ipfsNode.once('ready', () => {\n      this.ipfsNode.id((err, res) => {\n        if (err) {\n          throw err\n        }\n        this.setState({\n          ipfsOptions: {\n            id: res.id,\n            version: res.agentVersion,\n            protocol_version: res.protocolVersion,\n          },\n        });\n      });\n    });\n  }\n\n  getValidationState() {\n    const length = this.state.value.length;\n    if (length > 10) return 'success';\n    else if (length > 5) return 'warning';\n    else if (length > 0) return 'error';\n    return null;\n  }\n\n  handleChange(e) {\n    this.setState({ value: e.target.value });\n  }\n\n \n  /**\n   * web3Context = {\n   *   accounts: {Array<string>} - All accounts\n   *   selectedAccount: {string} - Default ETH account address (coinbase)\n   *   network: {string} - One of 'MAINNET', 'ROPSTEN', or 'UNKNOWN'\n   *   networkId: {string} - The network ID (e.g. '1' for main net)\n   * }\n   */\n \n  render () {\n    return (\n      <div style={{ textAlign: 'center' }}>\n        <h1>Connected to ethereum and ipfs network!</h1>\n        <p>Ethereum network: {this.context.web3.network}</p>\n        <p>Your IPFS version is <strong>{this.state.ipfsOptions.version}</strong></p>\n        <p>Your IPFS protocol version is <strong>{this.state.ipfsOptions.protocol_version}</strong></p>\n        <hr />\n        <p>Using your ethereum account: {this.context.web3.selectedAccount}</p>\n        <p>Your IPFS ID is <strong>{this.state.ipfsOptions.id}</strong></p>\n        <hr />\n        <p>Submitted Idea's IPFS hash: {this.state.added_file_hash}</p>\n        <p>Submitted Idea's content: {this.state.added_file_contents}</p>\n        <p>Checkout the uploaded idea at: {PUBLIC_GATEWAY}/{this.state.added_file_hash}</p>\n        <hr />\n        <form>\n          <FormGroup\n            controlId=\"formBasicText\"\n            validationState={this.getValidationState()}\n          >\n            <ControlLabel>Submit an Idea text to OSO Idea network</ControlLabel>\n            <FormControl\n              type=\"text\"\n              bsSize=\"small\"\n              value={this.state.value}\n              placeholder=\"Enter text\"\n              onChange={this.handleChange}\n            />\n            <FormControl.Feedback />\n            <HelpBlock>String should be more than 10 characters long.</HelpBlock>\n          </FormGroup>\n          <FormGroup>\n            <Col smOffset={2} sm={10}>\n              <Button onClick={this.uploadIdeaTextToIPFS}>Submit Idea</Button>\n            </Col>\n          </FormGroup>\n        </form>\n      </div>\n    )\n  }\n}\n \nIdeaForm.contextTypes = {\n  web3: PropTypes.object\n};\n \nexport default IdeaForm;"],"sourceRoot":""}